package main

import (
	"embed"
	"encoding/json"
	"fmt"
	"go/format"
	"strings"
	"text/template"
)

// trick go compiler into allowing this to compile
type _ = embed.FS

const tmplRaw = `package chunk

// THIS FILE IS AUTOGENERATED, DO NOT EDIT

import (
    "regexp"
    sitter "github.com/smacker/go-tree-sitter"
{{range .}} {{.Name}} "github.com/smacker/go-tree-sitter/{{.Module}}"
{{end}})

type Query struct {
	Name  string
	Query string
}

type Language struct {
	Name        string
    GetLanguage func() *sitter.Language
    FilePattern *regexp.Regexp
	Strided     bool    
	Queries     []Query 
}

var Languages []*Language

func init() {
    {{range .}}
    {
        re, err := regexp.Compile("{{.FilePattern}}")
        if err != nil { 
            panic(err) 
        }
        Languages = append(Languages, &Language{
            Name: "{{.Name}}",
            GetLanguage: {{.Name}}.GetLanguage,
            FilePattern: re,
            Strided: {{if .Strided}}true{{else}}false{{end}},
            Queries: []Query{
                {{range .Queries}}{Name: "{{.Name}}", Query: {{range .Query}}"{{.}} " +{{end}}""},
                {{end}}
            },
        })
    }
    {{end}}
}
`

//go:embed languages.json
var raw []byte

type Query struct {
	Name  string   `json:"name"`
	Query []string `json:"query"`
}

type Language struct {
	Name        string  `json:"name"`
	FilePattern string  `json:"file_pattern"`
	Module      string  `json:"module"`
	Strided     bool    `json:"strided"`
	Queries     []Query `json:"queries"`
}

func main() {
	var out []Language
	err := json.Unmarshal(raw, &out)
	if err != nil {
		panic(err)
	}

	tmpl, err := template.New("").Parse(tmplRaw)
	if err != nil {
		panic(err)
	}

	var w strings.Builder
	err = tmpl.Execute(&w, out)
	if err != nil {
		panic(err)
	}

	formattedCode, err := format.Source([]byte(w.String()))
	if err != nil {
		panic(err)
	}

	fmt.Println(string(formattedCode))
}
