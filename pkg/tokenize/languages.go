package tokenize

// THIS FILE IS AUTOGENERATED, DO NOT EDIT

import (
	sitter "github.com/smacker/go-tree-sitter"
	bash "github.com/smacker/go-tree-sitter/bash"
	golang "github.com/smacker/go-tree-sitter/golang"
	protobuf "github.com/smacker/go-tree-sitter/protobuf"
	python "github.com/smacker/go-tree-sitter/python"
	"regexp"
)

type Query struct {
	Name  string
	Query string
}

type Language struct {
	Name        string
	GetLanguage func() *sitter.Language
	FilePattern *regexp.Regexp
	Strided     bool
	Queries     []Query
}

var Languages []*Language

func init() {

	{
		re, err := regexp.Compile("\\.(sh|bash)$")
		if err != nil {
			panic(err)
		}
		Languages = append(Languages, &Language{
			Name:        "bash",
			GetLanguage: bash.GetLanguage,
			FilePattern: re,
			Strided:     false,
			Queries: []Query{
				{Name: "functions", Query: "(function_definition) @capture " + ""},
			},
		})
	}

	{
		re, err := regexp.Compile("\\.proto$")
		if err != nil {
			panic(err)
		}
		Languages = append(Languages, &Language{
			Name:        "protobuf",
			GetLanguage: protobuf.GetLanguage,
			FilePattern: re,
			Strided:     true,
			Queries: []Query{
				{Name: "functions", Query: "(service) @service " + ""},
			},
		})
	}

	{
		re, err := regexp.Compile("\\.py$")
		if err != nil {
			panic(err)
		}
		Languages = append(Languages, &Language{
			Name:        "python",
			GetLanguage: python.GetLanguage,
			FilePattern: re,
			Strided:     false,
			Queries: []Query{
				{Name: "function", Query: "(function_definition) @capture " + ""},
			},
		})
	}

	{
		re, err := regexp.Compile("\\.go")
		if err != nil {
			panic(err)
		}
		Languages = append(Languages, &Language{
			Name:        "golang",
			GetLanguage: golang.GetLanguage,
			FilePattern: re,
			Strided:     false,
			Queries: []Query{
				{Name: "function", Query: "[ " + "    (function_declaration), " + "    (method_declaration), " + "    (func_literal) " + "] @ function " + ""},
			},
		})
	}

}

